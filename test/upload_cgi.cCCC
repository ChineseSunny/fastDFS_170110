#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#include "fcgi_stdio.h"
#include "fcgi_config.h"
#include "util_cgi.h"
#include "make_log.h"
#include "fdfs_api.h"

#define FCGI        "fcgi"
#define FCGI_UPLOAD "upload"


int main ()
{
		int ret = 0;
		
    char *file_buf = NULL;
    //分割线 ---- sdsddasssadasdsa
    char boundary[256] = {0};
    char content_text[256] = {0};
    char filename[256] = {0};



    while (FCGI_Accept() >= 0) {
        char *contentLength = getenv("CONTENT_LENGTH");
        int len;

        printf("Content-type: text/html\r\n"
                "\r\n");

        if (contentLength != NULL) {
            len = strtol(contentLength, NULL, 10);
        }
        else {
            len = 0;
        }

        if (len <= 0) {
            printf("No data from standard input\n");
        }
        else {
            int i, ch;
            char *begin = NULL;
            char *end = NULL;
            char *p, *q, *k;

            //==========> 开辟存放文件的 内存 <===========

            file_buf = malloc(len);
            if (file_buf == NULL) {
                printf("malloc error! file size is to big!!!!\n");
                return -1;
            }


            begin = file_buf;
            p = begin;

            for (i = 0; i < len; i++) {
                if ((ch = getchar()) < 0) {
                    printf("Error: Not enough bytes received on standard input<p>\n");
                    break;
                }
                //putchar(ch);
                *p = ch;
                p++;
            }

            //将file_buf 存到本地，进行分析
            FILE *post_fp = fopen("./post_data.txt", "w");
            fwrite(file_buf, len , 1, post_fp);
            fclose(post_fp);

            //===========> 开始处理前端发送过来的post数据格式 <============
            //begin deal
            end = p;

            p = begin;

            //get boundary
            p = strstr(begin, "\r\n");
            if (p == NULL) {
                //printf("wrong no boundary!\n");
                LOG(FCGI, FCGI_UPLOAD, "wrong no boundary\n");
                goto END;
            }

            strncpy(boundary, begin, p-begin);
            boundary[p-begin] = '\0';
            LOG(FCGI, FCGI_UPLOAD, "boundary=[%s]", boundary);


            p+=2;//\r\n

            //已经处理了p-begin的长度
            len -= (p-begin);

            //get content text head
            begin = p;

            p = strstr(begin, "\r\n");
            if(p == NULL) {
                printf("ERROR: get context text error, no filename?\n");
                goto END;
            }
            strncpy(content_text, begin, p-begin);
            content_text[p-begin] = '\0';
            LOG(FCGI, FCGI_UPLOAD, "content_text: [%s]", content_text);

            p+=2;//\r\n
            len -= (p-begin);

            //get filename
            // filename="123123.png"
            //           ↑
            q = begin;
            q = strstr(begin, "filename=");

            q+=strlen("filename=");
            q++;

            k = strchr(q, '"');
            strncpy(filename, q, k-q);
            filename[k-q] = '\0';
            LOG(FCGI,FCGI_UPLOAD, "filename = [%s]", filename);

            trim_space(filename);

            //get file
            begin = p;     
            p = strstr(begin, "\r\n");
            p+=4;//\r\n\r\n
            len -= (p-begin);

            begin = p;
            // now begin -->file's begin
            //find file's end
            p = memstr(begin, len, boundary);
            if (p == NULL) {
                p = end-2;    //\r\n
            }
            else {
                p = p -2;//\r\n
            }

            //begin---> file_len = (p-begin)
            int fd = 0;
            fd = open(filename, O_CREAT|O_WRONLY, 0644);
            if (fd < 0) {
                printf("open %s error\n", filename);
            }
            ftruncate(fd, (p-begin));
            write(fd, begin, (p-begin));
            close(fd);

            //===============> 将该文件存入fastDFS中,并得到文件的file_id <============

						char *file_id = NULL;
						
						ret = myupload_byexec(filename,file_id);						
						
						
            //redis数据库建表
						//创建 redis 连接句柄
	/*
	redisContext* conn;
	char value[1024] = {0};
	
	char *filekey = "FILE_INFO_LIST";
	
	//连接redis tcp数据库
	conn = rop_connectdb_nopwd("127.0.0.1","6379");
	
	if(NULL == conn)
	{
		 LOG(ROP_MODULE, ROP_PROC, "conn db error");
		 ret = -1;
		 goto END;
	}
	
	//将file_id 入 redis数据库链表
	ret= rop_list_push(conn,filekey,file_id);
	
	if(ret)
	{
		LOG(ROP_MODULE,	ROP_PROC,"lpush %s err",filekey);
		goto END;
	}
	
	//ret = rop_hset_sting(redisContext *conn,char* key,char *field,char* value)
	
	//file_id 入 hash 表，hasn  key：FILEID_NAME_HASH
	ret = rop_hset_sting(conn,FILEID_NAME_HASH,file_id,argv[1]);
		
	if(ret)
	{
		LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, "[-][GMS_REDIS]hset:key:%s , fileid:%s,value: %s Error:%sn",FILEID_NAME_HASH,file_id, value,conn->errstr);
		ret = -1;
		goto END;
	}
	
	ret = rop_hset_sting(conn,FILEID_USER_HASH,file_id,"sunny");
	
	if(ret)
	{
		LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, "[-][GMS_REDIS]hset:key:%s , fileid:%s,value: %s Error:%sn",FILEID_USER_HASH,file_id, value,conn->errstr);
		ret = -1;
		goto END;
	}
	
	now = time(NULL);
	strftime(create_time, TIME_LEN-1, "%Y-%m-%d %H:%M:%S", localtime(&now));
	
	ret = rop_hset_sting(conn,FILEID_TIME_HASH,file_id,create_time);
	
	if(ret)
	{
		LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, "[-][GMS_REDIS]hset:key:%s , fileid:%s,value: %s Error:%sn",FILEID_TIME_HASH,file_id, value,conn->errstr);
		ret = -1;
		goto END;
	}
	
	ret = rop_hset_sting(conn,FILEID_PV_HASH,file_id,"1");
	
	if(ret)
	{
		LOG(REDIS_LOG_MODULE, REDIS_LOG_PROC, "[-][GMS_REDIS]hset:key:%s , fileid:%s,value: %s Error:%sn",FILEID_PV_HASH,file_id, value,conn->errstr);
		ret = -1;
		return ret;
	}
	
	/*rop_range_list 得到链表中的数据
	  @param values    得到表中的value数据
    @param get_num   得到结果value的个数
    
	ret = rop_range_list(conn,filekey, 0, -1,values ,&get_num);
	if(ret)
	{
		LOG(ROP_MODULE,	ROP_PROC,"lpush %s err",filekey);
		goto END;
	}
	printf("********filekey:%s\n",filekey);
	printf("********values:%s\n",values);*/
	
	/*if (conn != NULL) {
        rop_disconnect(conn);
    }*/

            //将本地文件删除掉
            unlink(filename);


            //================ > 得到文件所存放storage的host_name <=================


            //fielid f 入redis
            printf("%s 文件上传成功", filename);
END:

            memset(boundary, 0, 256);
            memset(content_text, 0, 256);
            memset(filename, 0, 256);

            free(file_buf);
            //printf("date: %s\r\n", getenv("QUERY_STRING"));
        }
    } /* while */

    return 0;
}
